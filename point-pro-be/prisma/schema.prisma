generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model Category {
  id        String    @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  title     String    @unique @db.VarChar(50)
  position  Int       @default(0) @db.SmallInt
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(0)
  meals     Meal[]

  @@map("categories")
}

model LoginLog {
  id            String   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  logType       LogType  @default(LOGIN) @map("log_type")
  operationTime DateTime @default(now()) @map("operation_time") @db.Timestamptz(0)
  userId        String   @map("user_id") @db.Uuid
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_logs")
}

model MealSpecialty {
  mealId      String    @map("meal_id") @db.Uuid
  specialtyId String    @map("specialty_id") @db.Uuid
  meals       Meal      @relation(fields: [mealId], references: [id], onDelete: Cascade)
  specialties Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  @@id([mealId, specialtyId])
  @@map("meal_specialties")
}

model MealSpecialtyItem {
  mealId          String        @map("meal_id") @db.Uuid
  specialtyItemId String        @map("specialty_item_id") @db.Uuid
  meal            Meal          @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  specialtyItems  SpecialtyItem @relation(fields: [specialtyItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([mealId, specialtyItemId])
  @@map("meal_specialty_items")
}

model Meal {
  id                 String              @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  title              String              @unique @db.VarChar(50)
  imageId            String              @default("") @map("image_id") @db.VarChar(50)
  imageDeleteHash    String?             @default("") @map("image_delete_hash") @db.VarChar(50)
  description        String              @default("")
  isPopular          Boolean             @default(false) @map("is_popular")
  price              Int                 @default(0)
  position           Int                 @default(0) @db.SmallInt
  publishedAt        DateTime?           @default(now()) @map("published_at") @db.Timestamptz(0)
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt          DateTime?           @updatedAt @map("updated_at") @db.Timestamptz(0)
  categoryId         String              @map("category_id") @db.Uuid
  mealSpecialties    MealSpecialty[]
  mealSpecialtyItems MealSpecialtyItem[]
  categories         Category            @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderMeals         OrderMeal[]

  @@map("meals")
}

model OrderMealSpecialtyItem {
  orderMealId     String        @map("order_meal_id") @db.Uuid
  specialtyItemId String        @map("specialty_item_id") @db.Uuid
  orderMeals      OrderMeal     @relation(fields: [orderMealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialtyItems  SpecialtyItem @relation(fields: [specialtyItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([orderMealId, specialtyItemId])
  @@map("order_meal_specialty_items")
}

model OrderMeal {
  id                      String                   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  amount                  Int                      @db.SmallInt
  servedAmount            Int                      @default(0) @map("served_amount") @db.SmallInt
  orderId                 String                   @map("order_id") @db.Uuid
  mealId                  String                   @map("meal_id") @db.Uuid
  orderMealSpecialtyItems OrderMealSpecialtyItem[]
  meals                   Meal                     @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders                  Order                    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order_meals")
}

model Order {
  id            String       @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  status        OrderStatus  @default(WORKING)
  type          OrderType    @default(DINE_IN)
  totalPrice    Int          @default(0) @map("total_price")
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt     DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(0)
  reservationId String?      @map("reservation_id") @db.Uuid
  paymentId     String?      @map("payment_id") @db.Uuid
  orderMeals    OrderMeal[]
  payments      Payment?     @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservations  Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("orders")
}

model Payment {
  id        String        @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  paymentNo String?       @unique @map("payment_no") @db.VarChar(50)
  price     Int
  gateway   String        @db.VarChar(50)
  status    PaymentStatus @default(UNPAID)
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt DateTime?     @updatedAt @map("updated_at") @db.Timestamptz(0)
  orders    Order[]

  @@map("payments")
}

model PeriodSeat {
  periodId               String                  @map("period_id") @db.Uuid
  seatId                 String                  @map("seat_id") @db.Uuid
  periods                Period                  @relation(fields: [periodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seats                  Seat                    @relation(fields: [seatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservationPeriodSeats ReservationPeriodSeat[]

  @@id([periodId, seatId])
  @@map("period_seats")
}

model Period {
  id           String        @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  startTime    DateTime      @map("start_time") @db.Timestamptz(0)
  endTime      DateTime      @map("end_time") @db.Timestamptz(0)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt    DateTime?     @updatedAt @map("updated_at") @db.Timestamptz(0)
  periodSeats  PeriodSeat[]
  reservations Reservation[]

  @@map("periods")
}

model ReservationPeriodSeat {
  reservationId String      @map("reservation_id") @db.Uuid
  periodId      String      @map("period_id") @db.Uuid
  seatId        String      @map("seat_id") @db.Uuid
  periodSeats   PeriodSeat  @relation(fields: [periodId, seatId], references: [periodId, seatId], onDelete: Cascade, onUpdate: Cascade)
  reservations  Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([reservationId, periodId, seatId])
  @@map("reservation_period_seats")
}

model Reservation {
  id                     String                  @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  type                   ReservationType         @default(ONLINE)
  username               String                  @db.VarChar(50)
  phone                  String                  @db.VarChar(20)
  email                  String?                 @db.VarChar(100)
  gender                 Gender                  @default(OTHER)
  people                 Int                     @default(1) @db.SmallInt
  remark                 String?                 @default("") @db.VarChar(255)
  isCancelled            Boolean                 @default(false) @map("is_cancelled")
  startAt                DateTime?               @map("start_at") @db.Timestamptz(0)
  endAt                  DateTime?               @map("end_at") @db.Timestamptz(0)
  createdAt              DateTime                @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt              DateTime?               @updatedAt @map("updated_at") @db.Timestamptz(0)
  periodId               String                  @map("period_id") @db.Uuid
  orders                 Order[]
  reservationPeriodSeats ReservationPeriodSeat[]
  periods                Period                  @relation(fields: [periodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("reservations")
}

model Seat {
  id          String       @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  seatNo      String       @unique @map("seat_no") @db.VarChar(5)
  capacity    Int          @db.SmallInt
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt   DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(0)
  periodSeats PeriodSeat[]

  @@map("seats")
}

model Specialty {
  id              String          @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  title           String          @unique @db.VarChar(50)
  selectionType   SelectionType   @default(SINGLE) @map("selection_type")
  position        Int             @default(0) @db.SmallInt
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt       DateTime?       @updatedAt @map("updated_at") @db.Timestamptz(0)
  mealSpecialties MealSpecialty[]
  specialtyItems  SpecialtyItem[]

  @@map("specialties")
}

model SpecialtyItem {
  id                      String                   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  title                   String                   @unique @db.VarChar(50)
  price                   Int                      @default(0)
  position                Int                      @default(0) @db.SmallInt
  createdAt               DateTime                 @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt               DateTime?                @updatedAt @map("updated_at") @db.Timestamptz(0)
  specialtyId             String                   @map("specialty_id") @db.Uuid
  mealSpecialtyItems      MealSpecialtyItem[]
  orderMealSpecialtyItems OrderMealSpecialtyItem[]
  specialties             Specialty                @relation(fields: [specialtyId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("specialty_items")
}

model User {
  id           String     @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  username     String     @unique @db.VarChar(50)
  phone        String     @unique @db.VarChar(20)
  email        String?    @db.VarChar(100)
  gender       Gender     @default(OTHER)
  passwordHash String     @map("password_hash") @db.VarChar(255)
  role         Role       @default(STAFF)
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(0)
  updatedAt    DateTime?  @updatedAt @map("updated_at") @db.Timestamptz(0)
  loginLogs    LoginLog[]

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}

enum LogType {
  LOGIN
  LOGOUT

  @@map("login_type")
}

enum OrderStatus {
  WORKING
  FINISHED
  CANCEL

  @@map("order_status")
}

enum OrderType {
  DINE_IN
  TAKE_OUT

  @@map("order_type")
}

enum PaymentStatus {
  UNPAID
  PAID
  CANCEL

  @@map("payment_status")
}

enum ReservationType {
  ONLINE
  PHONE

  @@map("reservation_type")
}

enum Role {
  STAFF
  ADMIN

  @@map("role")
}

enum SelectionType {
  SINGLE
  MULTIPLE

  @@map("selection_type")
}
